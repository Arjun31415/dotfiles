(defwidget dashboard []
  (box :class "dashboard-window" :space-evenly "false"  :orientation "h"
    (box :class "dashboard-spacer" :style {dash ? "padding-left: 0em;" : "padding-left: 437px;"})
    (box :class "dashboard-box" :orientation "v" :space-evenly "false"
      (box :class "first-row" :orientation "h"
        (box :class "column-one" :orientation "v"
          (box :class "avatar"
            (box :class "avatar-image")
          )
        )
        (box :class "column-two" :orientation "v" :space-evenly "false"
          (box :class "weather" :orientation "v" :space-evenly "false"
            (box :orientation "h" :space-evenly "false"
              (label :class "weather-desc" :text "${weather_desc}")
            )
            (label :class "weather-temp" :text "${weather_temp}°C (${weather_feels_like}°C)" :halign "start")
          )
          (box :class "date" :orientation "v" :space-evenly "false"
            (box :orientation "h" :space-evenly "false"
              (label :class "weekday" :text "${weekday}" :halign "start")
            )
            (label :class "monthday" :text "${monthday}" :halign "start")
          )
        )
      )
      (box :class "second-row" :orientation "h"
        (box :class "music-player" :orientation "h" :space-evenly "false"
          (box :class "song-art" :style "background-image: url('${art}')" song_art
            (box :class "music-info" :orientation "v" :space-evenly "false"
              (box :class "np" :orientation "h" :halign "start"
                (label :class "now-playing" :text player_status_text)
              )
              (box :class "title" :orientation "h" :halign "start"
                (label :class "song-title"
                  :text song_title
                  :tooltip song_title
                :limit-width 23)
              )
              (box :class "artist" :orientation "h" :halign "start"
                (label :class "song-artist"
                  :text song_artist
                :limit-width 35)
              )
              (box :class "position" :orientation "h" :halign "start"
                (label :class "song-position" :text song_position)
              )
            )
          )
          (box :class "song-controls" :orientation "v"
            (button :onclick "playerctl previous" "")
            (button :class "play-pause" :onclick "playerctl play-pause && f=$(eww get player_status);f=$((1-f));eww update player_status=$f  " {player_status==1 ? "" : ""})
            (button :onclick "playerctl next" "")
          )
        )
      )
      (box :class "third-row" :orientation "h" :space-evenly "false"
        (box :class "system-info-scale" :orientation "h" :space-evenly "false"
          (box :class "ram" :orientation "v"  :space-evenly "false"
            (label :class "ram-usage" :text "RAM")
            (circular-progress :class "ram-progress"
              :value used_ram
              :thickness 6
              :clockwise "true"
              :tooltip "Used RAM: ${used_ram}%"
              (label :class "ram-icon" :text "")
            )
          )
        )
        (box :class "system-info" :orientation "h" :space-evenly "false"
          (box :class "volume" :orientation "v" :space-evenly "false"
            (label :class "volume-icon" :text "")
            (scale :min 0
              :max 101
              :value volume_1
              :orientation "v"
              :flipped true
              :tooltip "Volume: ${volume_1}%"
              :onchange "amixer -D pulse sset Master {}%"
              :class "volbar"
            )
          )
          (box :class "brightness" :orientation "v" :space-evenly "false"
            (label :class "brightness-icon" :text "")
            (scale :min 0
              :max 101
              :value brightness
              :orientation "v"
              :flipped true
              :tooltip "Brightness: ${brightness}%"
              :onchange "brightnessctl set {}%"
              :class "bribar"
            )
          )
          (box :class "mic" :orientation "v" :space-evenly "false"
            (label :class "mic-icon" :text "")
            (scale :min 0
              :max 101
              :value micro
              :orientation "v"
              :flipped true
              :tooltip "Microphone Volume: ${micro}%"
              :onchange "amixer -D pulse sset Capture {}%"
              :class "micbar"
            )
          )
        )
      )
      (box :class "fourth-row" :orientation "h"
        (box :class "system-btn" :orientation "h" :space-evenly "true"
          (button :class {network_status==0 ? "network-btn network__disabled" : "network-btn network__active"}
                  :tooltip "Network"
                  :onclick "networkmanager_dmenu &" "${network_icon}")
          ; (button :class "redshift-btn" :style "background-color: ${redshift_status}" :tooltip "Night Light" :onclick "sh ./scripts/getRedshift toggle" {redshift_status})
          (button :class { dnd_status==0 ? "dnd__disabled dnd-btn" : "dnd__active dnd-btn" }
                  :onclick "sh ./scripts/dashActions.sh dnd" :tooltip "Do Not Disturb" "")
          (button :class { jeff_status==0 ? "jeff-btn jeff__disabled" : "jeff-btn jeff__active"}
                  :tooltip "Capture Screen"
                  :onclick "sh ./scripts/dashActions.sh jeff &" "")
        )
      )
    )
  )
)
(defvar dash true)
